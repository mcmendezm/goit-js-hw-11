{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAOC,SAASC,cAAc,SAC9BC,EAAaF,SAASC,cAAc,uBACpCE,EAAYH,SAASC,cAAc,sBACnCG,EAAcJ,SAASC,cAAc,wBAgC3C,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GACLC,KAAKC,SAAW,GAEpCC,YAAW,WACTJ,EAAQ,CAAEH,WAAUC,S,GACnBA,GAEHM,YAAW,WACTH,EAAO,CAAEJ,WAAUC,S,GAClBA,E,IAxCTR,EAAKe,iBAAiB,UAAU,SAAAC,GAC9BA,EAAEC,iBAEF,IAAMC,EAAQC,SAAShB,EAAWiB,OAC5BC,EAAOF,SAASf,EAAUgB,OAC1BE,EAASH,SAASd,EAAYe,OAEpC,GAAIG,MAAML,IAAUK,MAAMF,IAASE,MAAMD,GACvCE,EAAA1B,GAAS2B,OAAOC,QAAQ,mCAI1B,IAAK,IAAIC,EAAI,EAAGA,GAAKL,EAAQK,IAAK,CAIhCrB,EAHiBqB,EACIT,GAASS,EAAI,GAAKN,GAGpCO,MAAK,SAAAC,G,IAAGtB,EAAQsB,EAARtB,SAAUC,EAAKqB,EAALrB,MACjBgB,EAAA1B,GAAS2B,OAAOK,QACd,uBAAwCC,OAAfxB,EAAS,QAAYwB,OAANvB,EAAM,M,IAGjDwB,OAAM,SAAAH,G,IAAGtB,EAAQsB,EAARtB,SAAUC,EAAKqB,EAALrB,MAClBgB,EAAA1B,GAAS2B,OAAOC,QACd,sBAAqCK,OAAfxB,EAAS,QAAYwB,OAANvB,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\nconst delayInput = document.querySelector('input[name=\"delay\"]');\nconst stepInput = document.querySelector('input[name=\"step\"]');\nconst amountInput = document.querySelector('input[name=\"amount\"]');\n\nform.addEventListener('submit', e => {\n  e.preventDefault();\n\n  const delay = parseInt(delayInput.value);\n  const step = parseInt(stepInput.value);\n  const amount = parseInt(amountInput.value);\n\n  if (isNaN(delay) || isNaN(step) || isNaN(amount)) {\n    Notiflix.Notify.failure('Please enter valid numbers');\n    return;\n  }\n\n  for (let i = 1; i <= amount; i++) {\n    const position = i;\n    const currentDelay = delay + (i - 1) * step;\n\n    createPromise(position, currentDelay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n  }\n});\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    if (shouldResolve) {\n      setTimeout(() => {\n        resolve({ position, delay });\n      }, delay);\n    } else {\n      setTimeout(() => {\n        reject({ position, delay });\n      }, delay);\n    }\n  });\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$delayInput","$ce04d3a99e08e73b$var$stepInput","$ce04d3a99e08e73b$var$amountInput","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","Math","random","setTimeout","addEventListener","e","preventDefault","delay1","parseInt","value","step","amount","isNaN","$parcel$interopDefault","Notify","failure","i","then","param","success","concat","catch"],"version":3,"file":"03-promises.7852ce52.js.map"}